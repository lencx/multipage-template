#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const archiver = require('archiver')

let _v = process.argv[2]
let version = _v !== undefined ? _v : +new Date()

const resolve = (...dir) => path.resolve(__dirname, '..', ...dir)

const filename = `dist_${version}`

fs.exists(resolve('pack'), exist => {
    if(!exist) {
        fs.mkdir(resolve('pack'), err => {
            if (err !== null) console.error(err)
        })
        writePkg()
    } else writePkg()
})

function writePkg() {
    const output = fs.createWriteStream(`${resolve('pack')}/${filename}.zip`)
    const archive = archiver('zip', {
        zlib: {
            level: 9
        }
    })
    archive.pipe(output)

    output.on('close', () => {
        console.log(archive.pointer() + ' total bytes')
        console.log('archiver has been finalized and the output file descriptor has closed.')
    })
    output.on('end', () => {
        console.log('Data has been drained')
    })
    output.on('warning', err => {
        if(err.code === 'ENOENT') { }
        else throw err
    })

    archive.directory(`${resolve('dist')}`, false)
    archive.finalize()
}